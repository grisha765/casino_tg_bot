import asyncio
import random
from db.point import add_points, get_points, get_all_points
from pyrogram.errors import FloodWait
from casino.antispam import antispam_user
from core.vars import active_spins

from config import logging_config
logging = logging_config.setup_logging(__name__)

async def spin_func(message):
    chat_id = message.chat.id
    data = {"emoji": ['üçí', 'üçã', 'üçè', 'üçÜ'], "phrases": ['–í–∏—à–Ω—è! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!', '–õ–æ–≤–∏ –ª–∏–º–æ–Ω!', '–Ø–±–ª–æ–∫–æ –±–∞–∑–∞.', '–ë–ê–ö–õ–ê–ñ–ê–ù! –£ –≤–∞—Å –î–ñ–ï–ö–ü–û–¢! –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –ø–æ–≥–ª—É–±–∂–µ...']}
    user_id = message.from_user.id

    spam_check = await antispam_user(user_id, 60)

    if spam_check == "active_spin":
        try:
            msg_wait = await message.reply_text("–í—ã —É–∂–µ –≤—Ä–∞—â–∞–µ—Ç–µ –±–∞—Ä–∞–±–∞–Ω. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.")
            await asyncio.sleep(10)
            await msg_wait.delete()
        except:
            del active_spins[user_id]
        return

    if isinstance(spam_check, int):
        try:
            msg_wait = await message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {spam_check} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø—Ä–æ–∫—Ä—É—Ç–æ–º.")
            await asyncio.sleep(10)
            await msg_wait.delete()
        except:
            del active_spins[user_id]
        return

    active_spins[user_id] = True

    prev_spin_display = None
    try:
        msg = await message.reply_text("–í—Ä–∞—â–µ–Ω–∏–µ –±–∞—Ä–∞–±–∞–Ω–æ–≤...")
    except:
        del active_spins[user_id]
        return

    await asyncio.sleep(1)

    try:
        spins = 4
        for _ in range(spins):
            spin_display = prev_spin_display
            while spin_display == prev_spin_display:
                spin_display = [random.choice(data["emoji"]) for _ in range(3)]
            prev_spin_display = spin_display
            await msg.edit_text("üé∞ "+' - '.join(spin_display)+" üé∞")
            await asyncio.sleep(0.5)
    except FloodWait as e:
        await asyncio.sleep(e.value)
        await msg.edit_text("üé∞ "+"‚õîÔ∏è - ‚õîÔ∏è - ‚õîÔ∏è"+" üé∞"+"\n"+"–ê–≤—Ç–æ–º–∞—Ç –∑–∞–∫–ª–∏–Ω–∏–ª–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑!")
        del active_spins[user_id]
        return
    except:
        del active_spins[user_id]
        return

    del active_spins[user_id]
    result = [random.choice(data["emoji"]) for _ in range(3)]
    if len(set(result)) == 1:
        phrase_index = data["emoji"].index(result[0])
        await asyncio.sleep(0.5)
        await msg.edit_text(f"üé∞ {' - '.join(result)} üé∞\n{data['phrases'][phrase_index]}")
        log_point = await add_points(user_id, 1)
        logging.debug(log_point)
        logging.debug(f"{user_id}: Points - {await get_points(user_id)}")
    else:
        await asyncio.sleep(0.5)
        await msg.edit_text(f"üé∞ {' - '.join(result)} üé∞\n–£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")

if __name__ == "__main__":
    raise RuntimeError("This module should be run only via main.py")
