from pyrogram import Client, filters
from pyrogram.errors import FloodWait
import random
import time
from argparse import ArgumentParser
import asyncio
import re
import json

parser = ArgumentParser(description='Telegram-–±–æ—Ç —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ—Ç–æ–∫–∞–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞.')
parser.add_argument('-t', '--token', type=str, help='–¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞')
args = parser.parse_args()
if not args.token:
    parser.error('–ê—Ä–≥—É–º–µ–Ω—Ç —Ç–æ–∫–µ–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º. (-t TOKEN –∏–ª–∏ --token TOKEN), --help –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.')
api_id = 1
api_hash = 'b6b154c3707471f5339bd661645ed3d6'
bot_token = args.token
app = Client("my_bot", api_id=api_id, api_hash=api_hash, bot_token=bot_token)
last_command_usage = {}
active_spins = {}
random_spins_info = {}
wins_database = "wins.json"

symbols = ['üçí', 'üçã', 'üçè', 'üçÜ']
phrases = ['–í–∏—à–Ω—è! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!', '–õ–æ–≤–∏ –ª–∏–º–æ–Ω!', '–Ø–±–ª–æ–∫–æ –±–∞–∑–∞.', '–ë–ê–ö–õ–ê–ñ–ê–ù! –£ –≤–∞—Å –î–ñ–ï–ö–ü–û–¢! –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –ø–æ–≥–ª—É–±–∂–µ...', '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!', '–£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!']

filter_words = ["–∫–∞–∑–∏–Ω–æ", "—Å–ø–∏–Ω", "–∫–∞–∑–∏–∫", "—Å–ª–æ—Ç", "—Ä—É–ª–µ—Ç–∫", "—Å—Ç–∞–≤", "–¥–∂–µ–∫–ø–æ—Ç", "–∞–∑–∞—Ä—Ç", "–±–∞—Ä–∞–±–∞–Ω", "–≤—ã–∏–≥—Ä—ã—à", "–∞–≤—Ç–æ–º–∞—Ç", "–ø–æ–±–µ–¥", "–ø–µ—Ä–µ–º–æ"]
filter_regex = re.compile(r'\b(?:' + '|'.join(filter_words) + r')(?:[–∞-—è]*\b)', flags=re.IGNORECASE)

def load_wins_database():
    try:
        with open(wins_database, 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

def save_wins_database(data):
    with open(wins_database, 'w') as file:
        json.dump(data, file)

@app.on_message(filters.regex(filter_regex))
async def spin(_, message):
    current_time = time.time()
    user_id = message.from_user.id

    if user_id in active_spins:
        try:
            msg_wait = await message.reply_text("–í—ã —É–∂–µ –≤—Ä–∞—â–∞–µ—Ç–µ –±–∞—Ä–∞–±–∞–Ω. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.")
        except:
            del active_spins[user_id]
            return
        return
    active_spins[user_id] = True

    if user_id in last_command_usage and current_time - last_command_usage[user_id] < (10 + random_spins_info[user_id]):
        wait_time = int((10 + random_spins_info[user_id]) - (current_time - last_command_usage[user_id]))
        try:
            msg_wait = await message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø—Ä–æ–∫—Ä—É—Ç–æ–º.")
        except:
            del active_spins[user_id]
            return
        del active_spins[user_id]
        return
    last_command_usage[user_id] = current_time

    prev_spin_display = None
    try:
        msg = await message.reply_text("–í—Ä–∞—â–µ–Ω–∏–µ –±–∞—Ä–∞–±–∞–Ω–æ–≤...")
    except:
        del active_spins[user_id]
        return
    await asyncio.sleep(1)
    try:
        random_spins = random.randint(4, 8)
        random_spins_info[user_id] = random_spins
        for _ in range(random_spins):
            spin_display = prev_spin_display
            while spin_display == prev_spin_display:
                spin_display = [random.choice(symbols) for _ in range(3)]
            prev_spin_display = spin_display
            await msg.edit_text("üé∞ "+' - '.join(spin_display)+" üé∞")
            await asyncio.sleep(0.1)
    except FloodWait as e:
        await asyncio.sleep(e.value)
        await msg.edit_text("üé∞ "+"‚õîÔ∏è - ‚õîÔ∏è - ‚õîÔ∏è"+" üé∞"+"\n"+"–ê–≤—Ç–æ–º–∞—Ç –∑–∞–∫–ª–∏–Ω–∏–ª–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑!")
        del active_spins[user_id]
        return

    del active_spins[user_id]
    result = [random.choice(symbols) for _ in range(3)]
    if len(set(result)) == 1:
        if result[0] == symbols[0]: #–≤–∏—à–Ω—è
            await asyncio.sleep(0.1)
            await msg.edit_text("üé∞ "+' - '.join(result)+" üé∞"+"\n"+phrases[0])
            update_wins(user_id)
            return
        if result[0] == symbols[1]: #–ª–∏–º–æ–Ω
            await asyncio.sleep(0.1)
            await msg.edit_text("üé∞ "+' - '.join(result)+" üé∞"+"\n"+phrases[1])
            update_wins(user_id)
            return
        if result[0] == symbols[2]: #—è–±–ª–æ–∫–æ
            await asyncio.sleep(0.1)
            await msg.edit_text("üé∞ "+' - '.join(result)+" üé∞"+"\n"+phrases[2])
            update_wins(user_id)
            return
        if result[0] == symbols[3]: #–±–∞–∫–ª–∞–∂–∞–Ω
            await asyncio.sleep(0.1)
            await msg.edit_text("üé∞ "+' - '.join(result)+" üé∞"+"\n"+phrases[3])
            update_wins(user_id)
            return
        else:
            await asyncio.sleep(0.1) #–ø–æ–±–µ–¥–∞
            await msg.edit_text("üé∞ "+' - '.join(result)+" üé∞"+"\n"+phrases[4])
            update_wins(user_id)
            return
    else:
        await asyncio.sleep(0.1) #–ø—Ä–æ–∏–≥—Ä—ã—à
        await msg.edit_text("üé∞ "+' - '.join(result)+" üé∞"+"\n"+phrases[5])

def update_wins(user_id):
    wins_data = load_wins_database()
    if str(user_id) in wins_data:
        wins_data[str(user_id)] += 1
    else:
        wins_data[str(user_id)] = 1
    save_wins_database(wins_data)

@app.on_message(filters.command("wins"))
async def check_wins(_, message):
    user_id = message.from_user.id
    wins_data = load_wins_database()
    if str(user_id) in wins_data:
        wins_count = wins_data[str(user_id)]
        await message.reply_text(f"–í–∞—à–∏ –ø–æ–±–µ–¥—ã: {wins_count}")
    else:
        await message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–±–µ–¥.")

app.run()
