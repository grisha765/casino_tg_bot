from pyrogram import Client, filters
from pyrogram.errors import FloodWait
import random
import time
from argparse import ArgumentParser
import asyncio
import re

parser = ArgumentParser(description='Telegram-–±–æ—Ç —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ—Ç–æ–∫–∞–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞.')
parser.add_argument('-t', '--token', type=str, help='–¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞')
args = parser.parse_args()
if not args.token:
    parser.error('–ê—Ä–≥—É–º–µ–Ω—Ç —Ç–æ–∫–µ–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º. (-t TOKEN –∏–ª–∏ --token TOKEN), --help –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.')
api_id = 1
api_hash = 'b6b154c3707471f5339bd661645ed3d6'
bot_token = args.token
app = Client("my_bot", api_id=api_id, api_hash=api_hash, bot_token=bot_token)

last_command_usage = {}
rangecount = 0.1
symbols = ['üçí', 'üçã', 'üçè', 'üçÜ']
filter_words = ["–∫–∞–∑–∏–Ω–æ", "—Å–ø–∏–Ω", "–∫–∞–∑–∏–∫", "—Å–ª–æ—Ç", "—Ä—É–ª–µ—Ç–∫", "—Å—Ç–∞–≤", "–¥–∂–µ–∫–ø–æ—Ç", "–∞–∑–∞—Ä—Ç", "–±–∞—Ä–∞–±–∞–Ω", "–≤—ã–∏–≥—Ä—ã—à", "–∞–≤—Ç–æ–º–∞—Ç", "–ø–æ–±–µ–¥", "–ø–µ—Ä–µ–º–æ"]
filter_regex = re.compile(r'\b(?:' + '|'.join(filter_words) + r')(?:[–∞-—è]*\b)', flags=re.IGNORECASE)

@app.on_message(filters.regex(filter_regex))
async def spin(_, message):
    global last_command_usage
    user_id = message.from_user.id
    current_time = time.time()

    if user_id in last_command_usage and current_time - last_command_usage[user_id] < 10:
        wait_time = int(10 - (current_time - last_command_usage[user_id]))
        msg_wait = await message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø—Ä–æ–∫—Ä—É—Ç–æ–º.")
        return
    last_command_usage[user_id] = current_time

    prev_spin_display = None
    msg = await message.reply_text("–í—Ä–∞—â–µ–Ω–∏–µ –±–∞—Ä–∞–±–∞–Ω–æ–≤...")
    await asyncio.sleep(1)
    try:
        for _ in range(random.randint(4, 8)):
            spin_display = prev_spin_display
            while spin_display == prev_spin_display:
                spin_display = [random.choice(symbols) for _ in range(3)]
            prev_spin_display = spin_display
            await msg.edit_text("üé∞ "+' - '.join(spin_display)+" üé∞")
            await asyncio.sleep(rangecount)
    except FloodWait as e:
        await asyncio.sleep(e.value)
        await msg.edit_text("üé∞ "+"‚õîÔ∏è - ‚õîÔ∏è - ‚õîÔ∏è"+" üé∞"+"\n"+"–ê–≤—Ç–æ–º–∞—Ç –∑–∞–∫–ª–∏–Ω–∏–ª–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑!")
        return

    result = [random.choice(symbols) for _ in range(3)]
    if len(set(result)) == 1:
        if result[0] == 'üçÜ':
            await msg.edit_text("üé∞ "+' - '.join(result)+" üé∞"+"\n"+"–ë–ê–ö–õ–ê–ñ–ê–ù! –£ –≤–∞—Å –î–ñ–ï–ö–ü–û–¢! –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –ø–æ–≥–ª—É–±–∂–µ...")
        else:
            await asyncio.sleep(rangecount)
            await msg.edit_text("üé∞ "+' - '.join(result)+" üé∞"+"\n"+"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!")
    else:
        await asyncio.sleep(rangecount)
        await msg.edit_text("üé∞ "+' - '.join(result)+" üé∞"+"\n"+"–£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")

app.run()
