from pyrogram import Client, filters
from pyrogram.errors import FloodWait
from argparse import ArgumentParser
import random
import time
import asyncio
import re
import json
import unicodedata
import os
if not os.path.exists("bd"):
    os.makedirs("bd")

parser = ArgumentParser(description='Telegram-–±–æ—Ç —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ—Ç–æ–∫–∞–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞.')
parser.add_argument('-t', '--token', type=str, help='–¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞')
args = parser.parse_args()
if not args.token:
    parser.error('–ê—Ä–≥—É–º–µ–Ω—Ç —Ç–æ–∫–µ–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º. (-t TOKEN –∏–ª–∏ --token TOKEN), --help –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.')
api_id = 1
api_hash = 'b6b154c3707471f5339bd661645ed3d6'
bot_token = args.token
app = Client("my_bot", api_id=api_id, api_hash=api_hash, bot_token=bot_token)

last_command_usage_user = {}
last_command_usage_group = {}
active_spins = {}
wins_database = os.path.join("bd", "wins.json")

filter_words = ["–∫–∞–∑–∏–Ω–æ", "—Å–ø–∏–Ω", "–∫–∞–∑–∏–∫", "—Å–ª–æ—Ç", "—Ä—É–ª–µ—Ç–∫", "—Å—Ç–∞–≤", "–¥–∂–µ–∫–ø–æ—Ç", "–∞–∑–∞—Ä—Ç", "–±–∞—Ä–∞–±–∞–Ω", "–≤—ã–∏–≥—Ä—ã—à", "–∞–≤—Ç–æ–º–∞—Ç", "–ø–æ–±–µ–¥", "–ø–µ—Ä–µ–º–æ", "—Ä–æ–ª"]
filter_regex = re.compile(r'\b(?:' + '|'.join(filter_words) + r')(?:[–∞-—è]*\b)', flags=re.IGNORECASE)

#–ø–æ–º–æ—â—å –∫–æ–º–∞–Ω–¥–∞ /help
@app.on_message(filters.command("help"))
def check_help(_, message):
    message.reply_text("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n/help - –ø–æ–º–æ—â—å.\n/wins - –ø–æ–±–µ–¥—ã.\n/status - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ –∏ —Ñ—Ä–∞–∑—ã.\n/set - –∑–∞–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ –∏ –ø–æ–±–µ–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã.\n–ü—Ä–∏–º–µ—Ä: /set üçí:–í–∏—à–Ω—è. üçã:–õ–∏–º–æ–Ω. üçè:–Ø–±–ª–æ–∫–æ. üçÜ:–ë–∞–∫–ª–∞–∂–∞–Ω.\n–≠–º–æ–¥–∑–∏ Telegram Premium –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è")

def load_wins_database():
    try:
        with open(wins_database, 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

def save_wins_database(data):
    with open(wins_database, 'w') as file:
        json.dump(data, file)

def update_wins(user_id):
    wins_data = load_wins_database()
    if str(user_id) in wins_data:
        wins_data[str(user_id)] += 1
    else:
        wins_data[str(user_id)] = 1
    save_wins_database(wins_data)

#–ø–æ–±–µ–¥—ã –∫–æ–º–∞–Ω–¥–∞ /wins
@app.on_message(filters.command("wins"))
def check_wins(_, message):
    user_id = message.from_user.id
    wins_data = load_wins_database()
    if str(user_id) in wins_data:
        wins_count = wins_data[str(user_id)]
        message.reply_text(f"–í–∞—à–∏ –ø–æ–±–µ–¥—ã: {wins_count}")
    else:
        message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–±–µ–¥.")

def load_emoji_database(chat_id):
    try:
        with open(os.path.join("bd", f"data_{chat_id}.json"), "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return {"emoji": ['üçí', 'üçã', 'üçè', 'üçÜ'], "phrases": ['–í–∏—à–Ω—è! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!', '–õ–æ–≤–∏ –ª–∏–º–æ–Ω!', '–Ø–±–ª–æ–∫–æ –±–∞–∑–∞.', '–ë–ê–ö–õ–ê–ñ–ê–ù! –£ –≤–∞—Å –î–ñ–ï–ö–ü–û–¢! –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –ø–æ–≥–ª—É–±–∂–µ...']}

def save_emoji_database(data, chat_id):
    with open(os.path.join("bd", f"data_{chat_id}.json"), "w") as file:
        json.dump(data, file, indent=4)

def is_emoji(s):
    emoji_pattern = re.compile(
        "["
        "\U0001F300-\U0001F5FF"  # symbols & pictographs
        "\U0001F600-\U0001F64F"  # emoticons
        "\U0001F680-\U0001F6FF"  # transport & map symbols
        "\U0001F700-\U0001F77F"  # alchemical symbols
        "\U0001F780-\U0001F7FF"  # Geometric Shapes Extended
        "\U0001F800-\U0001F8FF"  # Supplemental Arrows-C
        "\U0001F900-\U0001F9FF"  # Supplemental Symbols and Pictographs
        "\U0001FA00-\U0001FA6F"  # Chess Symbols
        "\U0001FA70-\U0001FAFF"  # Symbols and Pictographs Extended-A
        "\U00002702-\U000027B0"  # Dingbats
        "\U000024C2-\U0001F251"
        "]+"
    )
    return bool(emoji_pattern.fullmatch(s))

#–∑–∞–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ –∫–æ–º–∞–Ω–¥–∞ /set
@app.on_message(filters.command("set", prefixes="/") & filters.group)
def set_emoji(client, message):
    chat_id = message.chat.id
    current_time = time.time()

    if chat_id in last_command_usage_group and current_time - last_command_usage_group[chat_id] < 900:
        wait_time = int((900 - (current_time - last_command_usage_group[chat_id])) / 60)
        msg_wait = message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {wait_time} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã.")
        time.sleep(10)
        msg_wait.delete()
        return
    last_command_usage_group[chat_id] = current_time

    if len(message.command) >= 2:
        data = load_emoji_database(chat_id)
        emojis_with_phrases = []
        for i in range(1, len(message.command)):
            if ':' in message.command[i]:
                emojis_with_phrases.append(message.command[i])
            elif i != 0:
                emojis_with_phrases[-1] += ' ' + message.command[i]
        count_colons = 0
        for item in emojis_with_phrases:
            count_colons += item.count(':')
        if count_colons != 4:
            msg_error = message.reply("–û—à–∏–±–∫–∞: –ù—É–∂–Ω–æ 4 —ç–º–æ–¥–∑–∏ –∏ –ø–æ–±–µ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑.")
            del last_command_usage_group[chat_id]
            time.sleep(10)
            msg_error.delete()
            return
        print(emojis_with_phrases)
        new_emojis = []
        new_phrases = []
        for emoji_with_phrase in emojis_with_phrases:
            emoji, phrase = emoji_with_phrase.split(":")
            if len(emoji) > 2:
                msg_error = message.reply("–û—à–∏–±–∫–∞: –î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–±–µ–¥–Ω–æ–π —Ñ—Ä–∞–∑—ã.")
                del last_command_usage_group[chat_id]
                time.sleep(10)
                msg_error.delete()
                return
            if len(phrase) < 1:
                msg_error = message.reply("–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–±–µ–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã.")
                del last_command_usage_group[chat_id]
                time.sleep(10)
                msg_error.delete()
                return
            if is_emoji(emoji):
                new_emojis.append(emoji)
                new_phrases.append(phrase)
            else:
                msg_error = message.reply("–û—à–∏–±–∫–∞: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª —ç–º–æ–¥–∑–∏.")
                del last_command_usage_group[chat_id]
                time.sleep(10)
                msg_error.delete()
                return

        data["emoji"] = new_emojis
        data["phrases"] = new_phrases
        save_emoji_database(data, chat_id)
        message.reply("–ù–æ–≤—ã–µ —ç–º–æ–¥–∑–∏ –∏ –ø–æ–±–µ–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        msg_error = message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set –≠–º–æ–¥–∑–∏1:–§—Ä–∞–∑–∞1. –≠–º–æ–¥–∑–∏2:–§—Ä–∞–∑–∞2. –≠–º–æ–¥–∑–∏3:–§—Ä–∞–∑–∞3. –≠–º–æ–¥–∑–∏4:–§—Ä–∞–∑–∞4.")
        del last_command_usage_group[chat_id]
        time.sleep(10)
        msg_error.delete()

#–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç–º–æ–¥–∑–∏ –≥—Ä—É–ø–ø—ã –∫–æ–º–∞–Ω–¥–∞ /status
@app.on_message(filters.command("status", prefixes="/") & filters.group)
def status(client, message):
    chat_id = message.chat.id
    data = load_emoji_database(chat_id)
    status_text = "–ó–∞–¥–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ –∏ —Ñ—Ä–∞–∑—ã –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ:\n"
    for emoji, phrase in zip(data["emoji"], data["phrases"]):
        status_text += f"{emoji}: {phrase}\n"
    message.reply(status_text)

#–∏–≥—Ä–∞
@app.on_message(filters.regex(filter_regex) & filters.group)
async def spin(_, message):
    chat_id = message.chat.id
    data = load_emoji_database(chat_id)
    current_time = time.time()
    user_id = message.from_user.id

    if user_id in active_spins:
        try:
            msg_wait = await message.reply_text("–í—ã —É–∂–µ –≤—Ä–∞—â–∞–µ—Ç–µ –±–∞—Ä–∞–±–∞–Ω. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.")
            await asyncio.sleep(10)
            await msg_wait.delete()
        except:
            del active_spins[user_id]
            return
        return
    active_spins[user_id] = True

    if user_id in last_command_usage_user and current_time - last_command_usage_user[user_id] < 10:
        wait_time = int(10 - (current_time - last_command_usage_user[user_id]))
        try:
            msg_wait = await message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø—Ä–æ–∫—Ä—É—Ç–æ–º.")
            del active_spins[user_id]
            await asyncio.sleep(10)
            await msg_wait.delete()
        except:
            del active_spins[user_id]
            return
        return
    last_command_usage_user[user_id] = current_time

    prev_spin_display = None
    try:
        msg = await message.reply_text("–í—Ä–∞—â–µ–Ω–∏–µ –±–∞—Ä–∞–±–∞–Ω–æ–≤...")
    except:
        del active_spins[user_id]
        return
    await asyncio.sleep(1)
    try:
        spins = 4
        for _ in range(spins):
            spin_display = prev_spin_display
            while spin_display == prev_spin_display:
                spin_display = [random.choice(data["emoji"]) for _ in range(3)]
            prev_spin_display = spin_display
            await msg.edit_text("üé∞ "+' - '.join(spin_display)+" üé∞")
            await asyncio.sleep(0.5)
    except FloodWait as e:
        await asyncio.sleep(e.value)
        await msg.edit_text("üé∞ "+"‚õîÔ∏è - ‚õîÔ∏è - ‚õîÔ∏è"+" üé∞"+"\n"+"–ê–≤—Ç–æ–º–∞—Ç –∑–∞–∫–ª–∏–Ω–∏–ª–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑!")
        del active_spins[user_id]
        return
    except:
        del active_spins[user_id]
        return

    del active_spins[user_id]
    result = [random.choice(data["emoji"]) for _ in range(3)]
    if len(set(result)) == 1:
        if result[0] == data["emoji"][0]: #—ç–º–æ–¥–∑–∏1
            await asyncio.sleep(0.5)
            await msg.edit_text("üé∞ "+' - '.join(result)+" üé∞"+"\n"+data["phrases"][0])
            update_wins(user_id)
            return
        if result[0] == data["emoji"][1]: #—ç–º–æ–¥–∑–∏2
            await asyncio.sleep(0.5)
            await msg.edit_text("üé∞ "+' - '.join(result)+" üé∞"+"\n"+data["phrases"][1])
            update_wins(user_id)
            return
        if result[0] == data["emoji"][2]: #—ç–º–æ–¥–∑–∏3
            await asyncio.sleep(0.5)
            await msg.edit_text("üé∞ "+' - '.join(result)+" üé∞"+"\n"+data["phrases"][2])
            update_wins(user_id)
            return
        if result[0] == data["emoji"][3]: #—ç–º–æ–¥–∑–∏4
            await asyncio.sleep(0.5)
            await msg.edit_text("üé∞ "+' - '.join(result)+" üé∞"+"\n"+data["phrases"][3])
            update_wins(user_id)
            return
        else:
            await asyncio.sleep(0.5) #–ø–æ–±–µ–¥–∞
            await msg.edit_text("üé∞ "+' - '.join(result)+" üé∞"+"\n"+'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!')
            update_wins(user_id)
            return
    else:
        await asyncio.sleep(0.5) #–ø—Ä–æ–∏–≥—Ä—ã—à
        await msg.edit_text("üé∞ "+' - '.join(result)+" üé∞"+"\n"+'–£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')

app.run()
